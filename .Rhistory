install.packages("KernSmooth")
library(KernSmooth)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(RCurl)
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
acs <- getURL(URL)
acs <- read.csv(textConnection(acs))
head(acs)
head(acs,1)
acs <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="./datascience/classwork/getting-and-cleaning/farms.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="./datascience/classwork/getting-and-cleaning/farms.csv", method="curl")
farms <- load.csv("./datascience/classwork/getting-and-cleaning/farms.csv")
farms <- read.csv("./datascience/classwork/getting-and-cleaning/farms.csv")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
largeFarms <- filter(farms, ACR==3 & AGS==6)
head largeFarms
head(largeFarms)
agricultureLogical <- filter(farms, ACR==3 & AGS==6)
which(agricultureLogical)
?which
str(farms)
head(3)
head(farms,3)
agriculturalLogical
head(agricultureLogical,3)
agricultureLogical$SERIALNO
agricultureLogical <- subset(farms, ACR==""3 & AGS=="6")
agricultureLogical <- subset(farms, ACR=="3" & AGS=="6")
agricultreLogical
str(agricultureLogical)
head(agricultureLogical, 3)
install.packages("jpeg")
library("jpeg", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
instructor <- readJPEG(getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
"))
instructor <- readJPEG(getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
"), method="CURL")
instructor <- readJPEG(getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
"))
instructorPic <-(getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
instructorPic <-getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
?wget
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./datascience/classwork/getting-and-cleaning/")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./datascience/classwork/getting-and-cleaning/", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./datascience/classwork/getting-and-cleaning/jeff", method="curl")
instructor <- readJPEG("./datascience/getting-and-cleaning/jeff", native=TRUE)
instructor <- readJPEG("./datascience/classwork/getting-and-cleaning/jeff", native=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "./datascience/classwork/getting-and-cleaning/GDP", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "./datascience/classwork/getting-and-cleaning/EdData", method="curl")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
GDP <- read.csv("./datascience/classwork/getting-and-cleaning/GDP")
EdData <- read.csv("./datascience/classwork/getting-and-cleaning/EdData")
struct(GDP)
str(GDP)
str(EdData)
names(GDP)
names(EdData)
mergedData <- merge(GDP, EdData, by.x="X", by.y="CountryCode", all=FALSE)
head(mergedData)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?arrange
sortedMergedData <- arrange(mergedData, desc(X.3))
?head
head(sortedMergedData, n=240)
head(sortedMergedData, n=20)
head(sortedMergedData, n=40)
head(sortedMergedData, n=60)
head(sortedMergedData, n=1)
sortedMergedData[1:2,1:5]
sortedMergedData[1:20,1:5]
sortedMergedData[1:40,1:5]
mergedData[as(X.3), "numeric"]
mergedData[1:10,as.numeric(X.3)]
sortedMergedData[1:2,1:5]
sortedMergedData[1:2,as.numeric(5)]
sortedMergedData <- arrange(mergedData, desc(as.numeric(X.3))
sortedMergedData <- arrange(mergedData, desc(as.numeric(X.3)))
sortedMergedData[1:2,1:5]
sortedMergedData[1:2,1:20]
sortedMergedData[1:20,1:5]
sortedMergedData[15:50,1:5]
names(GDP)
GDP[1:10,1:5]
GDP[1:30,1:5]
GDP[1:226,1:5]
GDP[1:220,1:5]
GDP[1:219,1:5]
GDP[5:219,1:5]
GSP2 <- GDP[5:219,1:5]
GSP2
GDP2 <- GDP[5:194,1:5]
head(GDP2)
arrange(GDP2, desc(X.3))
arrange(GDP2, desc(as.numeric(X.3)))
GDP <- read.csv("./datascience/classwork/getting-and-cleaning/GDP")
EdData <- read.csv("./datascience/classwork/getting-and-cleaning/EdData")
head(EdData)
mergedData <- merge(GDP, EdData, by.x="X", by.y="CountryCode", all=FALSE)
head(mergedData,5)
length(mergedData[,1])
mergedData <- merge(GDP, EdData, by.x="X", by.y="CountryCode", all=TRUE)
length(mergedData[,1])
length(GDP[,1])
length(EdData[,1])
GDP[6:220,1:5]
GDP[5:219,1:5]
GDP2 <- GDP[5:219,1:5]
GDP2[order(5),]
GDP3 <- GDP2[order(5),]
head(GDP3)
GDP3 <- GDP2[order(GDP2$X,)]
GDP3 <- GDP2[order(GDP2$X),]
GDP3
GDP3 <- GDP2[order(GDP2$X.3),]
GDP3
GDP3 <- GDP2[order(as.numeric(GDP2$X.3)),]
GDP3
GDP2
mergedData
head(mergedData)
head(mergedData, 10)
head(mergedData, 30)
View(mergedData)
mergedData <- merge(GDP, EdData, by.x="X", by.y="CountryCode", all=FALSE)
head(mergedData, 30)
length(mergedData[,1])
tail(mergedData,20)
head(EdData)
head(EdData,1)
head(mergedData,1)
mergedData <- merge(EdData, GDP, by.x="CountryCode", by.y="X", all=FALSE)
head(mergedData,4)
length(mergedData[,1]
GDP30
length(mergedData[,1])
head(GDP)
GDP[196,]
GDP[195,]
GDP[194,]
GDP[1,]
GDP[1:5,]
GDP[,(2 != NA)]
GDP[GDP[,2 !=NA]]
na.omit(GDP)
test <- na.omit(GDP)
test
GDP
test
test <- complete.cases(GDP[,X3])
test <- complete.cases(GDP[,3])
test
GDP[test,]
GDP[,3]
GDP[,1]
GDP[,2]
GDP[,3]
GDP[,5]
test <- complete.cases(GDP[,5])
test
GDP[test,]
test <- complete.cases(GDP[,2])
GDP[test,]
head(GDP)
GDP[,2]
GDP2
test <- complete.cases(GDP2[,2])
test
GDP2[test,]
test <- complete.cases(GDP2[,2])
test
GDP2[test,]
GDP2[,!(is.na(2))]
GDP2[,2]
GDP2[,!(is.na(2))]
GDP2[,is.na(2)]
GDP2[,!is.na(2)]
GDP[1:10,1:5]
GDP[150:190,1:5]
GDP[190:210,1:5]
GDP[GDP$2 !="" ]
GDP[GDP$Gross.domestic.product.2012 !="" ]
GDP$X2
GDP$X1
GDP$X
GDP$"Gross.domestic.product.2012"
GDP[GDP$"Gross.domestic.product.2012" != ""]
GDP[,GDP$"Gross.domestic.product.2012" != ""]
GDP[GDP$"Gross.domestic.product.2012" !="",]
GDP[nchar(GDP$"Gross.domestic.product.2012") > 0,]
GDP[stri_length(GDP$"Gross.domestic.product.2012") > 0,]
GDP[length(toString(GDP$"Gross.domestic.product.2012")) > 0,]
GDP[is.numeric(GDP$"Gross.domestic.product.2012"),]
GDP$"Gross.domestic.product.2012"[is.numeric(GDP$"Gross.domestic.product.2012"),]
GDP[GDP$"Gross.domestic.product.2012" !="",]
GDP[GDP$"Gross.domestic.product.2012" =="",]
GDP[!(GDP$"Gross.domestic.product.2012" ==""),]
GDP[is.numeric(GDP$"Gross.domestic.product.2012"),]
GDP[!(GDP$"Gross.domestic.product.2012" ==""),]
GDP[!(GDP$"Gross.domestic.product.2012" =="") & !(GDP$X2 == ""),]
GDP[!(GDP$"Gross.domestic.product.2012" ==""),]
GDP[!(GDP$"Gross.domestic.product.2012" =="") & !(GDP$X2 == ""),]
GDP[(!(GDP$"Gross.domestic.product.2012" =="") & !(GDP$X2 == "")),]
GDP[(!(GDP$X2 == "")),]
GDP$X2
GDP$X.2
GDP[!(GDP$"Gross.domestic.product.2012" =="") & !(GDP$X.2 == ""),]
GDP2 <- GDP[!(GDP$"Gross.domestic.product.2012" =="") & !(GDP$X.2 == ""),]
GDP2
mergedData <- merge(GDP2, EdData, by.x="X", by.y="CountryCode", all=FALSE)
mergedData
mergedData[1:10,1:5]
length(mergedData[1])
length(mergedData$X)
order(mergedData$"Gross.domestic.product.2012")
?sort
mergedData[order(mergedData$"Gross.domestic.product.2012",]
mergedData[order(mergedData$"Gross.domestic.product.2012"),]
head(mergedData[order(mergedData$"Gross.domestic.product.2012"),])
head(mergedData)
mergedData[order(as.numeric(mergedData$"Gross.domestic.product.2012")),]
head(mergedData[order(as.numeric(mergedData$"Gross.domestic.product.2012")),])
mergedData[1:5,1:5]
GDP[1:5,1:5]
GDP[5:15,1:5]
GDP[5:15,1:5][order(GDP$"Gross.domestic.product.2012")]
GDP[5:15,1:5][order(GDP[,2])]
order(GDP[,2])
GDP[1:5,2]
GDP2
order(GDP2[,2])
GDP2[1:1:5]
length(GDP2[1,])
length(GDP$X)
length(GDP2$X)
GDP2$X
GDP3 <- GDP2[2,1:5]
GDP3
GDP3 <- GDP2[2:191,1:5]
GDP3
length(GDP3$X)
GDP3[1,2]
GDP3[1,1:5]
GDP3[190,1:5]
mergedData[190:5]
mergedData
head(mergedData)
mergedData[1:5,1:10]
mergedData[1:10,1]
mergedData[1,1:10]
mergedData[1,1:11]
mergedData[1,1:20]
mergedData[1:20,mergedData$Region]
mergedData[mergedData$Region, 1:20]
mergedData[mergedData$"High income: OECD", 1:20]
mergedData[mergedData$"Income Group", 1:20]
mergedData$"Income Group"
head(mergedData)
mergedData$Income.Group
mergedData[mergedData$Income.Group = "High income: OECD",]
mergedData[mergedData$Income.Group == "High income: OECD",]
mergedData[mergedData$Income.Group == "High income: OECD", mergedData$'Gross.domestic.product.2012']
mergedData[mergedData$Income.Group == "High income: OECD", mergedData$"Gross.domestic.product.2012"]
mergedData[mergedData$Income.Group == "High income: OECD",]
OECDHigh <- mergedData[mergedData$Income.Group == "High income: OECD",]
OECDHigh
mean(OECDHigh$X.3)
mean(OECDHigh$X3)
OECDHigh$X3
OECDHigh$X.3
mean(OECDHigh$X.3)
mean(as.numeric(OECDHigh$X.3))
mean(as.numeric(OECDHigh$"Gross.domestic.product.2012"))
OECDHigh$X.3
OECDHigh$"X.3"Gross.domestic.product.2012"
OECDHigh$"Gross.domestic.product.2012"
mean(OECDHigh$"Gross.domestic.product.2012")
mean(as.numeric(OECDHigh$"Gross.domestic.product.2012"))
length(OECDHigh$"Gross.domestic.product.2012")
sum(as.numeric(OECDHigh$"Gross.domestic.product.2012"))
v <- OECDHigh$"Gross.domestic.product.2012")
v <- OECDHigh$"Gross.domestic.product.2012"
v
as.numeric(levels(v))[v]
mean(as.numeric(levels(v))[v])
GDP3
GDP2
mergeData
mergedData
head(mergedData)
mergedData[,1:10]
quantile(mergedDat$"Gross.domestic.product.2012", c(.2,.4,.6,.8))
quantile(mergedData$"Gross.domestic.product.2012", c(.2,.4,.6,.8))
as.numeric(levels(v))[v]
quantile(as.numeric(levels(v))[v], c(.2,.4,.6,.8))
quantile(as.numeric(levels(v))[v], c(.2,.4,.6,.8, 1))
head(mergedData)
length(mergedData$Gross.domestic.product.2012)
length(mergedData$Gross.domestic.product.2012) %/% 5
mergedData$Gross.domestic.product.2012
mergedData[1:5,1:15]
as.numeric(levels(mergedData$Gross.domestic.product.2012))[mergedData$Gross.domestic.product.2012]
length(as.numeric(levels(mergedData$Gross.domestic.product.2012))[mergedData$Gross.domestic.product.2012])
mergedData[order(as.numeric(levels(mergedData$Gross.domestic.product.2012))[mergedData$Gross.domestic.product.2012]))]
mergedData[order(as.numeric(levels(mergedData$Gross.domestic.product.2012))[mergedData$Gross.domestic.product.2012])]
vv <- cbind(mergedData, as.numeric(levels(mergedData$Gross.domestic.product.2012))[mergedData$Gross.domestic.product.2012])
vv
vv <- vv[order(ncol(vv)),]
vv
vv <- cbind(mergedData, as.numeric(levels(mergedData$Gross.domestic.product.2012))[mergedData$Gross.domestic.product.2012])
ncol(vv)
vv[,41]
vvv <- vv[order(,41)]
vvv <- vv[order(,41),]
vvv <- vv[order(vv[,41]),]
vvv
vv
head(vv)
head(vvv)
mergedTable[,income.group]
mergedData[,income.group]
head(mergedData)
mergedData[,Income.Group]
mergedData[,10]
mergedData[,9]
mergedData[,11]
mergedData[,12]
Q5 <- cbind(mergedData[,1:2], mergedData[,12])
Q5
Q5 <- cbind(Q5, mergedData$X.3)
Q5
vvv[,41]
Q5 <- cbind(Q5, vvv[41])
Q5
save.image("~/datascience/classwork/getting-and-cleaning/Week3Q5.RData")
Project1DataSet <- read.csv("~/datascience/classwork/exploratory-data-analysis/Project1DataSet.txt", sep=";")
View(Project1DataSet)
str(Project1DataSet)
with(ProjectDataSet, plot(Date,Global_active_power))
with(Project1DataSet, plot(Date,Global_active_power))
graph1 <- hist(Project1DataSet$Global_active_power)
graph1 <- hist(Project1DataSet$Global_active_power, col="red")
graph1 <- hist(Project1DataSet$Global_active_power, col="red", main=paste("Gloal Active Power"))
graph1 <- hist(Project1DataSet$Global_active_power, col="red", main=paste("Gloal Active Power"), xlab="Global Active Power (kilowatts")
EDAProject1()
load("~/datascience/classwork/exploratory-data-analysis/Plot1.R")
EDAProject1()
load("~/datascience/classwork/exploratory-data-analysis/Plot1.R")
Project1DataSet <- read.csv("~/datascience/classwork/exploratory-data-analysis/Project1DataSet.txt", sep=";")
plot(as.POSIXlt(paste(as.Date(Project1DataSet$Date, '%d/%m/%Y'),Project1DataSet$Time)), Project1DataSet$Global_active_power, typ="l", ylab="Global Active Power (kilowatts)", xlab="")
Project1DataSet <- read.csv("~/datascience/classwork/exploratory-data-analysis/Project1DataSet.txt", sep=";")
plot(as.POSIXlt(paste(as.Date(Project1DataSet$Date, '%d/%m/%Y'),Project1DataSet$Time)), Project1DataSet$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xlab="")
Project1DataSet <- read.csv("~/datascience/classwork/exploratory-data-analysis/Project1DataSet.txt", sep=";")
plot(as.POSIXlt(paste(as.Date(Project1DataSet$Date, '%d/%m/%Y'),Project1DataSet$Time)), Project1DataSet$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xlab="")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
source('~/datascience/classwork/exploratory-data-analysis/Plot1.R')
source('~/datascience/classwork/exploratory-data-analysis/exdata_data_NEI_data/plot1.R')
?rnorm
rnorm(75:85)
rnorm(75:85, mean=80)
c(89,80,80,80,80,80,80,80,80,10) - rnorm(75:85, mean=80)
c(80,80,80,80,80,80,80,80,80,80,80) - rnorm(75:85, mean=80)
mean(c(80,80,80,80,80,80,80,80,80,80,80) - rnorm(75:85, mean=80))
mean(c(80,80,80,80,80,80,80,80,80,80,80) - c(80,82,80,84,81,80,78,81,84,80,80))
mean(c(80,82,80,84,81,80,78,81,84,80,80) - c(80,80,80,80,80,80,80,80,80,80,80))
?length
mean(c(80,82,80,84,81,80,78,81,84,80,80) - c(80,80,80,80,80,80,80,80,80,80,80)) * length(c(80,80,80,80,80,80,80,80,80,80,80))
(mean(c(80,82,80,84,81,80,78,81,84,80,80) - c(80,80,80,80,80,80,80,80,80,80,80)) * length(c(80,80,80,80,80,80,80,80,80,80,80))) * 130
((mean(c(80,82,80,84,81,80,78,81,84,80,80) - c(80,80,80,80,80,80,80,80,80,80,80)) * length(c(80,80,80,80,80,80,80,80,80,80,80))) * 130) / 8
(mean(c(80,82,80,84,81,80,78,81,84,80,80) - c(80,80,80,80,80,80,80,80,80,80,80)) * length(c(80,80,80,80,80,80,80,80,80,80,80))) / 8
?png
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("boot", "codetools", "colorspace", "data.table", "foreign", "ggplot2", "jsonlite", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime", "nlme", "quantmod", "Rcpp", "survival", "zoo"))
install.packages(c("boot", "codetools", "colorspace", "data.table",
install.packages(c("boot", "codetools", "colorspace", "data.table", "foreign", "ggplot2", "jsonlite", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime", "nlme", "quantmod", "Rcpp", "survival", "zoo"))
setwd("~/datascience/classwork/ReproducibleResearch")
loadData <- function(filepath){
activity<-read.csv(filepath)
activity
}
mean.steps <-function(df){
# Compute mean steps per day, eliminating rows with NA value for steps
# Collect total number of steps per day
spd <- aggregate(df$steps, list(df$date), sum, na.rm=TRUE)
#Compute mean
mean(spd$x)
}
median.steps <-function(df){
# Compute median steps per day, eliminating rows with NA value for steps
# Collect total number of steps per day
spd <- aggregate(df$steps, list(df$date), sum, na.rm=TRUE)
#Compute median
median(spd$x)
}
histo.steps <- function(df){
agg <- aggregate(df$steps, list(df$date), sum, na.rm=TRUE)
ggplot(agg, aes(x=x)) + geom_histogram(data=agg$steps, binwidth = 500, color="black", fill="white")
}
steps.grouped.by.interval <- function(df){
# Compute the mean number of steps per five-minute interval over the period of the data set
agg.by.interval <- aggregate(df$steps, list(df$interval), mean, na.rm=TRUE)
}
count.NAs <- function(df){
length(which(is.na(df)))
}
subset.NAs <- function(df){
missing <- c(which(is.na(df)))
df[missing,]
}
subset.complete.cases <- function(df){
complete <- c(which(!is.na(df)))
df[complete,]
}
median.steps.per.interval <- function(df){
spi <- aggregate(df$steps, list(df$interval), median, na.rm=TRUE)
spi
}
mean.steps.per.interval <- function(df){
spi <- aggregate(df$steps, list(df$interval), mean, na.rm=TRUE)
spi
}
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
synthesize.dataset("activity.csv")
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
synthesize.dataset("activity.csv")
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
synthesize.dataset("activity.csv")
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
synthesize.dataset("activity.csv")
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
synthesize.dataset("activity.csv")
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
synthesize.dataset("activity.csv")
head(mean.steps)
df <- loadData("activity.csv")
mean.steps <- mean.steps.per.interval(df)
head(mean.stes)
head(mean.steps)
mean.steps[2355,]
tail(mean.steps)
subset(df, Group.1 == 2355)
subset(mean.steps, Group.1 == 2355)
df["Group.1" == 2355]
str(mean.steps)
mean.steps["Group.1" == 2355]
print(mean.steps.loc[mean.steps['Group.1']== 2355])
mean.steps[mean.steps.Group.1 == 2355,]
mean.steps[mean.steps$Group.1 == 2355,]
mean.steps[mean.steps$Group.1 == 2355,2]
str(incomplete.cases)
incomplete.cases <- subset.NAs(df)
str(incomplete.cases)
source('~/datascience/classwork/ReproducibleResearch/Assignment1.R')
